to log-changed-attributes
 if is-list? log-attributes
    [if-else is-list? first log-attributes
       [let len length log-attributes
        let index 0
        while [index < len]
            [let name-value item index log-attributes
             let attribute-name first name-value
             let attribute-value runresult attribute-name
             let previous-attribute-value first but-first name-value
             if attribute-value != previous-attribute-value
                [log-attribute attribute-name attribute-value
                 set log-attributes replace-item index log-attributes (list attribute-name attribute-value)]
             set index index + 1]]
       [; first time
        let new-log-attributes []
        forEach log-attributes
                [let attribute-value runresult ?
                 log-attribute ? attribute-value
                 set new-log-attributes lput (list ? attribute-value) new-log-attributes]
        set log-attributes new-log-attributes]]
end

to log-attribute [attribute-name attribute-value]
 if is-string? attribute-value
    [set attribute-value (word "\"" attribute-value "\"")]
 output-print (word attribute-name " of " kind " " who " set to " attribute-value time-description)
end


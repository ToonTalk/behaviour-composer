to log-changed-patch-attributes
   if is-list? log-patch-attributes
    [if-else is-list? first log-patch-attributes
       [let len length log-patch-attributes
        let index 0
        while [index < len]
            [let name-value item index log-patch-attributes
             let attribute-name first name-value
             let attribute-value runresult attribute-name
             let previous-attribute-value first but-first name-value
             if attribute-value != previous-attribute-value
                [log-patch-attribute attribute-name attribute-value
                 set log-patch-attributes replace-item index log-patch-attributes (list attribute-name attribute-value)]
             set index index + 1]]
       [; first time
        let new-log-patch-attributes []
        forEach log-patch-attributes
                [[?] ->
                 let attribute-value runresult ?
                 log-patch-attribute ? attribute-value
                 set new-log-patch-attributes lput (list ? attribute-value) new-log-patch-attributes]
        set log-patch-attributes new-log-patch-attributes]]
end

to log-patch-attribute [attribute-name attribute-value]
 if is-string? attribute-value
    [set attribute-value (word "\"" attribute-value "\"")]
 output-print (word attribute-name " " pxcor " " pycor " set to " attribute-value time-description)
end


to-report random-integer-between [n1 n2]
 report n1 + random (1 + n2 - n1)
end

to-report random-number-between [n1 n2]
 report n1 + random-float (n2 - n1)
end

to-report random-item [items]
 report item random length items items
end

to-report unit-vector [v]
 if (is-number? v) [report v]
; if wrapping [set v canonical-vector v]
 let distance-squared reduce [?1 + ?2] map [?1 * ?1] v
 if distance-squared = 0 [report 0] ; or an error?
 let dist sqrt distance-squared 
 report map [?1 / dist] v
end

to-report add [v1 v2]
 if is-number? v1 and is-number? v2 [report v1 + v2]
 if is-number? v1 [report map [v1 + ?] v2]
 if is-number? v2 [report map [? + v2] v1]
 report canonical-distance (map [?1 + ?2] v1 v2)
end

to-report subtract [v1 v2]
 if is-number? v1 and is-number? v2 [report v1 - v2]
 if is-number? v1 [report map [v1 - ?] v2]
 if is-number? v2 [report map [? - v2] v1]
 report canonical-distance (map [?1 - ?2] v1 v2)
end

to-report multiply [v1 v2]
 if is-number? v1 and is-number? v2 [report v1 * v2]
 if is-number? v1 [report map [v1 * ?] v2]
 if is-number? v2 [report map [? * v2] v1]
 report canonical-distance (map [?1 * ?2] v1 v2)
end

to-report divide [v1 v2]
 if is-number? v1 and is-number? v2 [report v1 / v2]
 if is-number? v1 [report map [v1 / ?] v2]
 if is-number? v2 [report map [? / v2] v1]
 report canonical-distance (map [?1 / ?2] v1 v2)
end

to-report is-zero? [v]
 if is-number? v [report v = 0]
 if v = [] [report true]
 if first v != 0 [report false]
 report is-zero? butFirst v
end

to-report reciprocal [n]
 ; avoids division by zero since often used in probability calculation
 if n = 0 [report 9007199254740992]
 report 1 / n
end

to-report within-range [x minimum-value maximum-value]
 if x < minimum-value [report minimum-value]
 if x > maximum-value [report maximum-value]
 report x
end

; following based on http://www.nr.com/forum/showthread.php?t=1396

to-report power-law-list [n power maximum-value]
  report n-values n [power-law-random power maximum-value]
end

to-report power-law-list-no-zeros [n power maximum-value]
  report n-values n [power-law-random-no-zeros power maximum-value]
end

to-report power-law-random [s maximum-value]
  let one-minus-s 1.0 - s
  let one-minus-s-inverse 1.0 / one-minus-s
  let hxm hfunction (maximum-value + 0.5) one-minus-s one-minus-s-inverse
  let hx0MinusHxm (hfunction 0.5 one-minus-s one-minus-s-inverse) - exp (ln 1.0 * (-1 * s)) - hxm;
  while [true]
    [let ur hxm + random-float 1.0 * hx0MinusHxm
     let x hinv ur one-minus-s one-minus-s-inverse
     let k floor (x + 0.5)
     if ((k - x) <= s) or ((ur >= ((hfunction k one-minus-s one-minus-s-inverse + 0.5) - exp(-1 * (ln (k + 1.0) * s)))))
        [report k]
    ]  
end

to-report power-law-random-no-zeros [s maximum-value]
  let one-minus-s 1.0 - s
  let one-minus-s-inverse 1.0 / one-minus-s
  let hxm hfunction (maximum-value + 0.5) one-minus-s one-minus-s-inverse
  let hx0MinusHxm (hfunction 0.5 one-minus-s one-minus-s-inverse) - exp (ln 1.0 * (-1 * s)) - hxm;
  while [true]
    [let ur hxm + random-float 1.0 * hx0MinusHxm
     let x hinv ur one-minus-s one-minus-s-inverse
     let k ceiling (x + 0.5)
     if ((k - x) <= s) or ((ur >= ((hfunction k one-minus-s one-minus-s-inverse + 0.5) - exp(-1 * (ln (k + 1.0) * s)))))
        [report k]
    ]  
end

to-report hfunction [x one-minus-s one-minus-s-inverse]
  report (exp (one-minus-s * ln (1.0 + x))) * one-minus-s-inverse
end

to-report hinv [x one-minus-s one-minus-s-inverse]
  report exp (one-minus-s-inverse * (ln (one-minus-s * x))) - 1.0
end

to log-log-histogram [unsorted-data increment]
  if empty? unsorted-data or increment <= 0 [stop]
  let data sort unsorted-data
  let low first data
  let high low + increment
  let max-index length data
  let index 0
  while [index < max-index] 
    [let c 0
     let element item index data
     while [element >= low and element < high and index < max-index] 
           [set c c + 1 
            set index index + 1
            if index < max-index [set element item index data]]
     if c > 0
        [plotxy ln (low + increment / 2)
                ln c]
     set low high
     set high low + increment]
end

